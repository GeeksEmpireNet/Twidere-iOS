<%_ for type in types.protocols where type.annotations["restProtocol"] != nil { -%>
// sourcery:file:<%= type.name %>+RestImpl.swift
import PromiseKit
import RestClient

<%= "\(type.accessLevel) " %>class <%= type.name %>RestImpl: <%= type.name %>, RestAPIProtocol {

    let client: RestClient

    required init(client: RestClient) {
        self.client = client
    }
<%_ for method in type.allMethods { -%>

    func <%= method.name %> -> <%= method.returnTypeName %> {
        <%_ var returnTypeString = "\(method.returnTypeName)"
            if (!returnTypeString.hasPrefix("Promise<") || !returnTypeString.hasSuffix(">")) {
                fatalError("invalid return type in \(type.name).\(method.name), must be a Promise object")
            }
            let start = returnTypeString.index(returnTypeString.startIndex, offsetBy: 8)
            let end = returnTypeString.index(returnTypeString.endIndex, offsetBy: -1)
            returnTypeString = returnTypeString.substring(with: start..<end)
        -%>
        let call = RestCall<<%= returnTypeString %>>()
        <%_ guard let reqMethodName = method.annotations["restMethod"] as? String else {
            fatalError("invalid annotation restMethod in \(type.name).\(method.name)")
        }
        -%>
        <%_ guard let reqPath = method.annotations["restPath"] as? String else {
            fatalError("invalid annotation restPath in \(type.name).\(method.name)")
        }
        -%>
        call.method = .<%= reqMethodName.lowercased() %>
        call.path = "<%= reqPath %>"
        <%_ let headerParameters = method.parameters.filter { $0.annotations["header"] != nil } -%>
        <%_ if (!headerParameters.isEmpty) { -%>
        call.headers = [
            <%_ for param in headerParameters { -%>
                <%_ let paramName = param.annotations["query"] as? String ?? param.name -%>
            "<%= paramName %>": <%= param.name %>
            <%_ } -%>
        ]
        <%_ } -%>
        <%_
          var queries: [String: String?] = [:]
          for query in method.parameters.filter({ $0.annotations["query"] != nil }) {
              queries[query.annotations["query"] as? String ?? query.name] = query.name
          }
          if let constQueries = (method.annotations["restQueries"] as? String)?.removingPercentEncoding {
              for constQuery in constQueries.components(separatedBy: "&") {
                  let components = constQuery.components(separatedBy: "=")
                  if (components.count >= 2) {
                      queries[components[0]] = "\"\(components[1])\""
                  } else {
                      queries[components[0]] = nil
                  }
              }
          }
         -%>
        <%_ if (!queries.isEmpty) { -%>
        call.queries = [
            <%_ for (name, value) in queries { -%>
            "<%= name %>": <%= value %>,
            <%_ } -%>
        ]
        <%_ } -%>
        <%_
          var params: [String: String?] = [:]
          for param in method.parameters.filter({ $0.annotations["param"] != nil }) {
              params[param.annotations["param"] as? String ?? param.name] = param.name
          }
          if let constParams = (method.annotations["restParams"] as? String)?.removingPercentEncoding {
              for constParam in constParams.components(separatedBy: "&") {
                  let components = constParam.components(separatedBy: "=")
                  if (components.count >= 2) {
                      params[components[0]] = "\"\(components[1])\""
                  } else {
                      params[components[0]] = nil
                  }
              }
          }
         -%>
        <%_ if (!params.isEmpty) { -%>
        call.params = [
            <%_ for (name, value) in params { -%>
                <%_ if let value = value { -%>
            "<%= name %>": <%= value %>,
                <%_ } else { -%>
            "<%= name %>": nil,
                <%_ } -%>
            <%_ } -%>
        ]
        <%_ } -%>
        <%_
        guard let reqSerializer = method.annotations["restSerializer"] as? String else {
            fatalError("invalid annotation restSerializer in \(type.name).\(method.name)")
        }
        -%>
        call.serializer = <%= reqSerializer %>
        return client.toPromise(call)
    }
<% } %>
}
// sourcery:end
<%_ } -%>
