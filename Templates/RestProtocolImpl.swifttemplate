<%_ for type in types.protocols where type.annotations["restProtocol"] != nil { _%>
// sourcery:file:<%= type.name %>+RestImpl.swift
import PromiseKit

<%= "\(type.accessLevel) " %>class <%= type.name %>RestImpl: <%= type.name %> {

    let client: RestClient

    init(client: RestClient) {
        self.client = client
    }
<%_ for method in type.methods { -%>

    func <%= method.name %> -> <%= method.returnTypeName %> {
        <%_ var returnTypeString = "\(method.returnTypeName)"
            if (!returnTypeString.hasPrefix("Promise<") || !returnTypeString.hasSuffix(">")) {
                fatalError("invalid return type in \(type.name).\(method.name), must be a Promise object")
            }
            let start = returnTypeString.index(returnTypeString.startIndex, offsetBy: 8)
            let end = returnTypeString.index(returnTypeString.endIndex, offsetBy: -1)
            returnTypeString = returnTypeString.substring(with: start..<end)
        -%>
        let call = RestCall<<%= returnTypeString %>>()
        <%_ guard let reqMethodName = method.annotations["restMethod"] as? String else {
            fatalError("invalid annotation restMethod in \(type.name).\(method.name)")
        }
        -%>
        <%_ guard let reqPath = method.annotations["restPath"] as? String else {
            fatalError("invalid annotation restPath in \(type.name).\(method.name)")
        }
        -%>
        call.method = .<%= reqMethodName.lowercased() %>
        call.path = "<%= reqPath %>"
        <%_ let headerParameters = method.parameters.filter { $0.annotations["header"] != nil } -%>
        <%_ if (!headerParameters.isEmpty) { -%>
        call.headers = [
            <%_ for param in headerParameters { -%>
                <%_ let paramName = param.annotations["query"] as? String ?? param.name -%>
            "<%= paramName %>": <%= param.name %>
            <%_ } -%>
        ]
        <%_ } -%>
        <%_ let queryParameters = method.parameters.filter { $0.annotations["query"] != nil } -%>
        <%_ if (!queryParameters.isEmpty) { -%>
        call.querys = [
            <%_ for param in queryParameters { -%>
                <%_ let queryName = param.annotations["query"] as? String ?? param.name -%>
            "<%= queryName %>": "\(<%= param.name %>)"
            <%_ } -%>
        ]
        <%_ } -%>
        <%_ let paramParameters = method.parameters.filter { $0.annotations["param"] != nil } -%>
        <%_ if (!paramParameters.isEmpty) { -%>
        call.params = [
            <%_ for param in paramParameters { -%>
                <%_ let paramName = param.annotations["query"] as? String ?? param.name -%>
            "<%= paramName %>": <%= param.name %>
            <%_ } -%>
        ]
        <%_ } -%>
        return client.toPromise(call)
    }
<% } %>
}
// sourcery:end
<%_ } -%>
