%{
    import yaml
    from collections import OrderedDict

    def ordered_load(stream, Loader=yaml.Loader, object_pairs_hook=OrderedDict):
        class OrderedLoader(Loader):
            pass
        def construct_mapping(loader, node):
            loader.flatten_mapping(node)
            return object_pairs_hook(loader.construct_pairs(node))
        OrderedLoader.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, construct_mapping)
        return yaml.load(stream, OrderedLoader)

    with open(modelPath, 'r') as f:
        model = ordered_load(f, yaml.SafeLoader)
        fields = model['fields']
        submodels = model.get('submodels', [])
        importNames = model.get('imports', [])
        className = model['name']
}%
% for importName in importNames:
import ${importName}
%end

class ${className} {

% for propertyName in fields:
    % propertyType = fields[propertyName]['type']
    % if propertyType.endswith('?'):
    var ${propertyName}: ${propertyType}
    % else:
    var ${propertyName}: ${propertyType}!
    %end
%end

% for subModelName in submodels:
    class ${subModelName} {
    % subModelFields = submodels[subModelName]['fields']

    % for propertyName in subModelFields:
        % propertyType = subModelFields[propertyName]['type']
        % if propertyType.endswith('?'):
        var ${propertyName}: ${propertyType}
        % else:
        var ${propertyName}: ${propertyType}!
        %end
    %end
    }
%end

}
