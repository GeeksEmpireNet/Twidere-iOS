%{
import yaml
from collections import OrderedDict

def ordered_load(stream, Loader=yaml.Loader, object_pairs_hook=OrderedDict):
    class OrderedLoader(Loader):
        pass
    def construct_mapping(loader, node):
        loader.flatten_mapping(node)
        return object_pairs_hook(loader.construct_pairs(node))
    OrderedLoader.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, construct_mapping)
    return yaml.load(stream, OrderedLoader)

with open(modelPath, 'r') as f:
    modelDef = ordered_load(f, yaml.SafeLoader)
    importNames = modelDef.get('imports', [])

def generateEnumContent(name, model, indent=0):
    fieldsLines = []
    values = model['values']
    for value in values:
        fieldsLines.append("    case {value}".format(
            value=value
            ))
    inheritance = model.get('inheritance', None)
    inheritanceContent = ''
    appendBodyContent = model.get('append_body', '')
    if inheritance is not None:
        inheritanceContent = ' : ' + inheritance
    classTemplate ="""enum {modelName}{inheritanceContent} {{

    // Fields
{fieldsContent}
    // Append body content
{appendBodyContent}

}}""".format(
        modelName=name,
        modelType=modelType,
        fieldsContent='\n'.join(fieldsLines),
        inheritanceContent=inheritanceContent,
        appendBodyContent=appendBodyContent
    )
    classLines = classTemplate.splitlines()
    indentedLines = [(' ' * 4 * indent) + l for l in classLines]
    return '\n'.join(indentedLines)

def generateModelContent(name, modelType, model, indent=0):
    fieldsLines = []
    initParameters = []
    initLines = []
    fields = model['fields']
    for propertyName in fields:
        field = fields[propertyName]
        propertyType = field['type']
        propertyInit = field.get('init', None)
        propertyBody = field.get('body', None)
        if field.get('override', False):
            continue
        if propertyBody is not None:
            propertyBody = " " + propertyBody
        else:
            propertyBody = ""
        if propertyInit is not None:
            propertyInitContent = " = {init}".format(init=propertyInit)
            paramInitContent = propertyInitContent
        else:
            propertyInitContent = ''
            if propertyType.endswith('!'):
                paramInitContent = " = nil"
            else:
                paramInitContent = ""
        fieldsLines.append("    var {propertyName}: {propertyType}{propertyInit}{propertyBody}".format(
            propertyName=propertyName,
            propertyType=propertyType,
            propertyInit=propertyInitContent,
            propertyBody=propertyBody
            ))
        if (modelType == 'class'):
            initParameters.append("{propertyName}: {propertyType}{paramInit}".format(
                propertyName=propertyName,
                propertyType=propertyType,
                paramInit=paramInitContent
                ))
            initLines.append("        self.{propertyName} = {propertyName}".format(
                propertyName=propertyName
                ))
    subModelsLines = []
    submodels = model.get('submodels', [])
    inheritance = model.get('inheritance', None)
    inheritanceContent = ''
    appendBodyContent = model.get('append_body', '')
    if modelType == 'class':
        initializersContent = "    init({initParameters}) {{\n{initLines}\n    }}".format(
            initParameters = ', '.join(initParameters),
            initLines = '\n'.join(initLines)
        )
    else:
        initializersContent = ''
    if inheritance is not None:
        inheritanceContent = ' : ' + inheritance
    for subModelName in submodels:
        submodel = submodels[subModelName]
        submodelType = submodel.get('type', 'class')
        if submodelType == 'enum':
            subModelsLines.append(generateEnumContent(subModelName, submodel, indent + 1))
        else:
            subModelsLines.append(generateModelContent(subModelName, submodelType, submodel, indent + 1))
    classTemplate ="""{modelType} {modelName}{inheritanceContent} {{

    // Fields
{fieldsContent}
    // Initializers
{initializersContent}
    // Append body content
{appendBodyContent}
    // Sub models
{subModelsContent}
}}""".format(
        modelName=name,
        modelType=modelType,
        fieldsContent='\n'.join(fieldsLines),
        initializersContent=initializersContent,
        subModelsContent='\n'.join(subModelsLines),
        inheritanceContent=inheritanceContent,
        appendBodyContent=appendBodyContent
    )
    classLines = classTemplate.splitlines()
    indentedLines = [(' ' * 4 * indent) + l for l in classLines]
    return '\n'.join(indentedLines)
}%
// Automatically generated, DO NOT MODIFY
% for importName in importNames:
import ${importName}
%end
% rootModels = modelDef['submodels']
% for modelName in rootModels:
    % rootModel = rootModels[modelName]
    % modelType = rootModel.get('type', 'class')
    
    % if modelType == 'enum':
${generateEnumContent(modelName, rootModel)}
    % else:
${generateModelContent(modelName, modelType, rootModel)}
    %end
%end
