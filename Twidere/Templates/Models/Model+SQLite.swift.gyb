%{
    import yaml
    from collections import OrderedDict

    def ordered_load(stream, Loader=yaml.Loader, object_pairs_hook=OrderedDict):
        class OrderedLoader(Loader):
            pass
        def construct_mapping(loader, node):
            loader.flatten_mapping(node)
            return object_pairs_hook(loader.construct_pairs(node))
        OrderedLoader.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, construct_mapping)
        return yaml.load(stream, OrderedLoader)

    with open(modelPath, 'r') as f:
        modelDef = ordered_load(f, yaml.SafeLoader)
        if not modelDef.get('sqlite', True):
            exit(1)
        importNames = modelDef.get('imports', [])
}%

// Automatically generated, DO NOT MODIFY
% for importName in importNames:
import ${importName}
%end
import SQLite

% rootModels = modelDef['submodels']
% for modelName in rootModels:
%   fields = rootModels[modelName]['fields']
extension ${modelName} {

    convenience init(row: Row) {
        self.init()
    % for propertyName in fields:
      % if fields[propertyName].get('column', None) is not None:
        self.${propertyName} = row.get(RowIndices.${propertyName})
      %end
    %end
    }

    static func createTable(table: Table, temporary: Bool = false, ifNotExists: Bool = false) -> String {
        return table.create(temporary: temporary, ifNotExists: ifNotExists) { t in
        % for propertyName in fields:
            % field = fields[propertyName]
            % columnName = field.get('column', None)
            % if columnName is not None:
              %{
              columnArguments = ''
              primaryKey = field.get('primary_key', None)
              if primaryKey is not None:
                  columnArguments += ', primaryKey: .%s' % primaryKey
              }%
            t.column(RowIndices.${propertyName}${columnArguments})
            %end
        %end
        }
    }

    static func insertData(table: Table, model: ${modelName}) -> Insert {
        return table.insert( [
            % for idx, propertyName in enumerate(fields):
            % field = fields[propertyName]
                % if field.get('primary_key', None) != 'Autoincrement' and field.get('column', None) is not None:
                RowIndices.${propertyName} <- model.${propertyName},
                %end
            %end
        ])
    }

    struct RowIndices {

    % for propertyName in fields:
        % field = fields[propertyName]
        % propertyType = field['type']
        % columnName = field.get('column', None)
        % if columnName is None:
        %   pass
        % elif propertyType.endswith('?'):
        static let ${propertyName} = Expression<${propertyType}>("${columnName}")
        % elif field.get('primary_key', None):
        static let ${propertyName} = Expression<${propertyType}>("${columnName}")
        % else:
        static let ${propertyName} = Expression<${propertyType}?>("${columnName}")
        %end
    %end

        static let columns: [Expressible] = [
    % propertiesCount = 0
    % for propertyName in fields:
      % if fields[propertyName].get('column', None) is not None:
            ${propertyName},
      %end
    %end
        ]
    }

}
%end
